/*
 * ChHalftone.osl by Charlie (c)2012
 * from https://github.com/sambler/osl-shaders
 *
 * original script from -
 * http://blenderartists.org/forum/showthread.php?270332-OSL-Goodness/page9
 *
 */


/**
Pattern selects the dot type
Axis is a switch to set the Axis to the centre of the pattern area. (Shifts the texture)
Scale and Frequency do the same thing but it is useful to have the two inputs so one can be driven. 
Size is equivalent to the width of the halftone dot.
SizeMultiplier adds additional control, so one can be driven.

Halftone returns the halftone.
Texture returns the texture used to generate the halftone.
X & Y return the texture coordinates.

*/

shader halftone_texture(  

    int Pattern = 0,
    int Axis = 0,
    int PingPong = 0,
    float Size = 0.5,  
    float SizeMultiplier = M_SQRT2,  
    float Frequency = 16,
    float Scale = 16,
    output float Halftone = 0
    
)  
{  
    float Y = 0;
    float X = 0;
    float Texture = 0;
    
    void centre_axis(){
        /* generate texture origin based on 0,0 -1 to 1 */
        X= X*2-1;
        Y= Y*2-1;
    }
    
    void ping_pong(output float in){
        /* reverses coordinates every other pattern */
        int i= 0;
        i= (int)ceil(in);
        if (in > 1.0) {
            if ( i % 2 == 0 ) { 
                in= mod(in,1);
                in= 1-in;
            } 
            else {
                in= mod(in,1);
            }
        }
    }    

    
    X= P[0] * Scale * Frequency;
    Y= P[1] * Scale * Frequency;
        
    if (PingPong == 1){
        ping_pong(X);
        ping_pong(Y);
    } else if (PingPong == 2){
        ping_pong(X);
    } else if (PingPong == 3){
        ping_pong(Y);
    }
    
    X= mod(X,1); 
    Y= mod(Y,1); 

    if (Axis == 0){
        centre_axis();
    }
    
    if (Pattern == 0)
    {
        Texture= X*X+Y*Y; /* circle */
    }
    else if (Pattern == 1)
    {
        Texture= max(abs(X),abs(Y)); /* square */
    } 
    else if (Pattern == 2)
    {
        Texture= (abs(X)+abs(Y))/2; /* diamond */
    } 
    else if (Pattern == 3)
    {
        Texture= (atan2(abs(Y),X) / (2*M_PI))*2; /* cone */
    }     
    else if (Pattern == 4)
    {
        Texture= (X+Y)/2; /* triangle */
    }          
    else if (Pattern == 5)
    {
        Texture= (X+1)/2; /* linear x */
    } 
    else if (Pattern == 6)
    {
        Texture= (Y+1)/2; /* linear y */
    }       
    else if (Pattern == 7)
    {
        Texture= atan(abs(X))+atan(abs(Y));; /* cross */
    }     
    else {
        
        Texture= (atan2(Y,X) / (2*M_PI) + 0.5); /* test */
    }
        
    /* compare R to the dot size */
    if (Texture > Size*SizeMultiplier) Halftone= 0;
    else Halftone= 1;      

}


