/*******************************************************************************
 * JBUMcraters.sl -- Lunar-like surface - Jim Bumgardner jbum@jbum.com
 *
 * Voronoi/Worley noise is combined using 1/f scaling to put craters on a
 *surface. Similar tricks can be used to make cork, swiss-cheese, bread, etc.
 ******************************************************************************/

shader JBUMcraters(
    color weight = 1,
    float compare = 0.1,
    float MaxDepth = 0.6, /* Depth of crater displacement */
    float MaxWidth = 0.1, /* Size of largest crater relative to s/t mapping */
    float Probability = 0.7, /* chance of crater occuring in a cell */
    float Amplitude = 9.0,   /* amplitude reduction between successive Detail */
    float Detail = 1.0,      /* number of scales used - use lower numbers for
                                cartoony effects */
    float Spacing = 1.0,     /* diameter spacing between successive Detail */
    float Jitter = 1.0,      /* irregularity of crater spacing */

    //    output normal Normal = 0
    output closure color result = 0
)
{

    float s = P[0];
    float t = P[1];

    float ss, tt, angle, r, rim, uu, a, i, j, sc, asc, lev = 0;
    float sctr, tctr, scell, tcell, scellctr, tcellctr;
    float pert = 0, rad, pert2;
    float rmax = MaxWidth / 2; /* was /2 */
    float rmax1 = 1000000, rmax2 = 1000000, rrad1 = 0, rrad2 = 0, cellsizescale,
        ilac;

    ilac = 1 / Spacing;

    color diffuse_color = color(0,0,1);
        
    // sc = pow(Spacing, lev);
    sc = 1;
    ilac = 1;
    rmax = 0.05;
    rad = rmax * ilac / sc;
    rad *= rad;
    if (MaxWidth * floor(P[1] * sc / MaxWidth) < compare ){
        diffuse_color = color(1,0,0);
    }
    ss = P[0] - MaxWidth * floor(P[0] * sc / MaxWidth) ;
    tt = P[1] - MaxWidth * floor(P[1] * sc / MaxWidth) ;

    r = ss * ss + tt * tt ; /* r is distance from center squared */
    
    r = smoothstep(0, rad, r);
    pert += sin(r * M_PI);


    normal Nf;
    // P += MaxDepth*pert*normalize(N);
    // N = calculatenormal(P);
    Nf = faceforward(normalize(calculatenormal(P + MaxDepth * pert * normalize(N))), -I);

    result = weight * diffuse_color * diffuse(Nf);
}
