float magnitude(vector v) {
    // NOTE 计算向量的长度
    return sqrt(v[0] * v[0] + v[1] * v[1]);
}


shader align_uvcoords_to_vec(
    point p = point(0),
    point vec = point(0),
    vector scale = vector(1),
    output vector uv = vector(u,v,0)
){
    // NOTE 获取点云 屏幕 坐标
    point p_ss = transform("world", "screen", p);
    // NOTE 获取点云屏幕坐标的法线方向
    point p_v_ss = transform("world", "screen", p+vec);
    // NOTE 获取点云屏幕坐标的向上方向
    point p_up_ss = transform("world", "screen", p+point(0, 1, 0));

    vector a = normalize(p_ss - p_v_ss);
    vector b = normalize(p_ss - p_up_ss);

    vector a2 = a[0] < 0.0 ? a : -a;
    // NOTE 计算出向上向量和法线向量的角度差
    float angle = acos(dot(a2, b) / (magnitude(a2)*magnitude(b)));


    // NOTE 居中根据角度差旋转
    uv = vector(u, v, 0);
    uv -= 0.5;
    uv  = rotate(uv, angle, point(0,0,0), vector(0,0,1));
    uv /= scale;
    uv += 0.5;
}